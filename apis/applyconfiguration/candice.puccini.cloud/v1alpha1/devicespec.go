// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tliron/candice/resources/candice.puccini.cloud/v1alpha1"
)

// DeviceSpecApplyConfiguration represents an declarative configuration of the DeviceSpec type for use
// with apply.
type DeviceSpecApplyConfiguration struct {
	Protocol *v1alpha1.DeviceProtocol          `json:"protocol,omitempty"`
	Direct   *DeviceDirectApplyConfiguration   `json:"direct,omitempty"`
	Indirect *DeviceIndirectApplyConfiguration `json:"indirect,omitempty"`
}

// DeviceSpecApplyConfiguration constructs an declarative configuration of the DeviceSpec type for use with
// apply.
func DeviceSpec() *DeviceSpecApplyConfiguration {
	return &DeviceSpecApplyConfiguration{}
}

// WithProtocol sets the Protocol field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Protocol field is set to the value of the last call.
func (b *DeviceSpecApplyConfiguration) WithProtocol(value v1alpha1.DeviceProtocol) *DeviceSpecApplyConfiguration {
	b.Protocol = &value
	return b
}

// WithDirect sets the Direct field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Direct field is set to the value of the last call.
func (b *DeviceSpecApplyConfiguration) WithDirect(value *DeviceDirectApplyConfiguration) *DeviceSpecApplyConfiguration {
	b.Direct = value
	return b
}

// WithIndirect sets the Indirect field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Indirect field is set to the value of the last call.
func (b *DeviceSpecApplyConfiguration) WithIndirect(value *DeviceIndirectApplyConfiguration) *DeviceSpecApplyConfiguration {
	b.Indirect = value
	return b
}
